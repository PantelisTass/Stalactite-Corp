# for scraping
library(rvest)
# blanket import for core tidyverse packages
library(tidyverse)
# tidy financial analysis 
library(tidyquant)
# tidy data cleaning functions
library(janitor)
library(quantmod)
library(ggplot2)
today = Sys.Date()
today
date = today %m+% months(-3)
date

# get the URL for the wikipedia page with all SP500 symbols
url <- "https://en.wikipedia.org/wiki/List_of_S%26P_500_companies"
# use that URL to scrape the SP500 table using rvest
tickers <- url %>%
  # read the HTML from the webpage
  read_html() %>%
  # one way to get table
  #html_nodes(xpath='//*[@id="mw-content-text"]/div/table[1]') %>%
  # easier way to get table
  html_nodes(xpath = '//*[@id="constituents"]') %>% 
  html_table()
#create a vector of tickers
sp500tickers <- tickers[[1]]
sp500tickers$Symbol
sp500tickers = sp500tickers %>% mutate(Symbol = case_when(Symbol == "BRK.B" ~ "BRK-B",
                                                          Symbol == "BF.B" ~ "BF-B",
                                                          TRUE ~ as.character(Symbol)))
sp500 = sp500tickers$Symbol

get_symbols = function(ticker = "AAPL"){
  df = tq_get(ticker, from = date) %>% mutate(symbol = rep(ticker, length(date)))
}
#create the dataframe of SP500 data by interating over our list of symbols and call our get symbols function each time
#the map function accomplishes this




GBMotion = function(symbol, N, startDate, endDate, s = FALSE){ 
  actual = getSymbols(symbol, from = startDate, to = endDate, auto.assign = FALSE, env = FALSE)
  Symbol = getSymbols(symbol, to = startDate, auto.assign = FALSE, env = FALSE)
  
  PriceMat = c()
  
  vec = as.vector(Symbol[,2])
  

  Daily_returns = c()
  
  for(i in 1:(length(vec)-1)){
    Daily_returns = c(Daily_returns, log(vec[i+1]/vec[i]))
  }
  
  mu = mean(Daily_returns)
  sigma = sd(Daily_returns)
  drift = mu-(sigma**2)/2
  
  days = as.numeric(as.Date(endDate)-as.Date(startDate))
  t = seq(0, days, 1)
  for (i in 0:days){
    t[i+1] = as.Date(startDate) + i
  }
  dates = as.Date(t)
  colvec = c()
  for(j in 1: N){
    set.seed(NULL)
    returns = c(Daily_returns[length(Daily_returns)])
    for(n in 1:days){
      returns = c(returns, returns[length(returns)] + drift + sigma*rnorm(n = 1, mean = 0, sd = 1))
    }
    PriceMat = cbind(PriceMat, vec[length(vec)]*exp(returns))
    colvec = c(colvec, j)
  }
  PriceMat = cbind(PriceMat, as.Date(dates))
  colvec = c(colvec, 'time')
  if(s  == TRUE){
    diff = setdiff(as.vector(dates), as.vector(index(actual)))
    Intersect = intersect(as.vector(dates), as.vector(index(actual)))
    actual_dates = index(actual)
    Actual = numeric(length(dates))
    Time_actual = numeric(length(dates))
    indices = which(dates%in%Intersect==TRUE)
    actual = actual[,2]
    for (i in 1: length(dates)){
      if (i%in%indices==TRUE){
        Actual[i] = actual[which(indices==i)]
        Time_actual[i] = dates[i]
      }
      else{
        Actual[i] = actual[1]
        Time_actual[i] = dates[1]
      }
    }
    PriceMat = cbind(PriceMat, Time_actual)
    colvec = c(colvec, 'Time_actual')
    PriceMat = cbind(PriceMat, Actual)
    colvec = c(colvec, 'actual')
    #, 'Time_actual', 'actual'
    df = data.frame(PriceMat)
    colnames(df) = colvec
    actual_df = data.frame(cbind(actual_dates, as.vector(actual)))
    colnames(actual_df) = c('actual_dates', 'Historical')
    
    df_long = melt(df, id = c('time', 'Time_actual', 'actual'), variable = c('Paths'))
    print(df_long)
    gg = ggplot(df_long, mapping = aes(x = as.Date(time), y = value, linetype = symbol, colour = Paths)) + ggtitle (paste("Price Projections for", symbol))+xlab('Time')+ylab('Price')+geom_line() + 
      geom_line(actual_df, size = 1, mapping = aes(as.Date(actual_dates), Historical), color = 'black')+
      #scale_linetype_manual(values = c('Hist'='dashed'))
     labs(linetype="Historical Path")
    print(gg)
   
  }
  
  return(df_long)
  
}

vec = GBMotion('AAPL', 10, '2020-01-01', '2021-05-01', s = TRUE)
